echo "# MyVoxelAdventure" >> README.md 
git init 
git add README.md 
git commit -m "premier commit" 
git branch -M main 
git remote add origin https://github.com/ambroise-oss/MyVoxelAdventure.git
 git push -u origin main{
  "name": "myvoxeladventure",
  "version": "1.0.0",
  "description": "Jeu voxel FPS proc√©dural bilingue - par Thibs16",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.19.2"
  }
}
// Serveur principal du jeu
// Auteur : Thibs16

import express from "express";
import path from "path";
import { fileURLToPath } from "url";

const app = express();
const __dirname = path.dirname(fileURLToPath(import.meta.url));

app.use(express.static(path.join(__dirname, "public")));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåç Serveur MyVoxelAdventure lanc√© sur http://localhost:${PORT}`));
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>MyVoxelAdventure</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background-color: #000;
      color: white;
      font-family: monospace;
    }
    #menu {
      position: absolute;
      top: 20px;
      left: 20px;
      background: rgba(0,0,0,0.6);
      padding: 12px;
      border-radius: 12px;
    }
    button {
      margin: 5px;
      padding: 8px 14px;
      border: none;
      background: #0078ff;
      color: white;
      border-radius: 8px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="menu">
    <h2>üåç MyVoxelAdventure</h2>
    <p>Bienvenue, <strong>Thibs16</strong> !</p>
    <button onclick="startGame()">‚ñ∂Ô∏è D√©marrer</button>
    <button onclick="openSettings()">‚öôÔ∏è Param√®tres</button>
  </div>
  <canvas id="gameCanvas"></canvas>
  <script type="module" src="game.js"></script>
</body>
</html>
import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.module.js';
import { generateWorld } from './scripts/worldGen.js';
import { handlePortals } from './scripts/portals.js';

let scene, camera, renderer, world;
let clock = new THREE.Clock();

window.startGame = function () {
  document.getElementById("menu").style.display = "none";
  init();
  animate();
};

window.openSettings = function () {
  alert("üîß Param√®tres √† venir : touches, sensibilit√©, langue FR/EN...");
};

function init() {
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  renderer = new THREE.WebGLRenderer({ canvas: document.getElementById("gameCanvas") });
  renderer.setSize(window.innerWidth, window.innerHeight);

  world = generateWorld(scene);
  handlePortals(scene);

  const light = new THREE.DirectionalLight(0xffffff, 1);
  light.position.set(10, 50, 10);
  scene.add(light);

  camera.position.set(0, 5, 10);

  window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });
}

function animate() {
  requestAnimationFrame(animate);
  const delta = clock.getDelta();
  world.update(delta);
  renderer.render(scene, camera);
}
import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.module.js';

export function generateWorld(scene) {
  const group = new THREE.Group();
  const blockGeo = new THREE.BoxGeometry(1, 1, 1);
  const grassMat = new THREE.MeshLambertMaterial({ color: 0x00aa00 });
  const dirtMat = new THREE.MeshLambertMaterial({ color: 0x8b4513 });

  const size = 64;
  for (let x = -size/2; x < size/2; x++) {
    for (let z = -size/2; z < size/2; z++) {
      let h = Math.floor(Math.random() * 3) + 1;
      for (let y = 0; y < h; y++) {
        const mat = (y === h - 1) ? grassMat : dirtMat;
        const block = new THREE.Mesh(blockGeo, mat);
        block.position.set(x, y - 2, z);
        group.add(block);
      }
    }
  }
  scene.add(group);

  return {
    update: (delta) => {}
  };
}
{
  "name": "World Main",
  "description": "Monde principal g√©n√©r√© proc√©duralement",
  "portals": ["Aetheria", "Inferna", "Cryonia", "Chronos"]
}
